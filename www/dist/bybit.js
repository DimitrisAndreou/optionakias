(()=>{"use strict";class e{constructor(e){this._columns=[],this._options={frozenRows:1,frozenColumns:0,showRowNumber:!1,columnWidth:200,allowHtml:!0,...e}}defineColumn(e,t,i,...r){return this._columns.push({header:e,valueFn:t,type:i,columnFormatters:r}),this}format(e,t){const i=new google.visualization.DataTable;this._columns.forEach((e=>i.addColumn(e.type,e.header))),i.addRows(e.map((e=>this._columns.map((t=>t.valueFn(e))))));const r=new google.visualization.Table(document.getElementById(t));return this._columns.forEach(((e,t)=>e.columnFormatters.forEach((e=>e.format(i,t))))),i.setProperty(0,0,"style","width:100px"),r.draw(i,this._options),{data:i,table:r}}}google.charts.load("current",{packages:["table"]});const t=()=>new google.visualization.NumberFormat({pattern:"$#,###"}),i=()=>new google.visualization.NumberFormat({pattern:"#,###%"}),r=()=>new google.visualization.NumberFormat({pattern:"#.00"}),n=()=>new google.visualization.DateFormat({pattern:"dd MMM yyyy"}),s=()=>{const e=new google.visualization.ColorFormat;return e.addGradientRange(1,2,"#000000","#aff7b6","#93ecf8"),e.addGradientRange(2,4,"#000000","#93ecf8","#ffff50"),e.addGradientRange(4,8,"#000000","#ffff50","#fccf4b"),e.addGradientRange(8,16,"#000000","#fccf4b","#ffaaff"),e.addGradientRange(16,32,"#000000","#ffaaff","#ddaaff"),e.addGradientRange(32,null,"#000000","#ddaaff","#f2725d"),e},a=()=>{const e=new google.visualization.ColorFormat;return e.addGradientRange(0,1,"#000000","#FFFFFF","#00FF00"),e.addGradientRange(1,null,"#000000","#00FF00","#00FF00"),e},o=()=>{const e=new google.visualization.ColorFormat;return e.addGradientRange(null,-1,"#000000","#00FF00","#00FF00"),e.addGradientRange(-1,0,"#000000","#00FF00","#FFFFFF"),e.addGradientRange(0,1,"#000000","#FFFFFF","#FF0000"),e.addGradientRange(1,null,"#000000","#FF0000","#FF0000"),e},l=()=>{const e=new google.visualization.ColorFormat;return e.addGradientRange(null,-1,"#000000","#FF0000","#FF0000"),e.addGradientRange(-1,0,"#000000","#FF0000","#FFFFFF"),e.addGradientRange(0,1,"#000000","#FFFFFF","#00FF00"),e.addGradientRange(1,null,"#000000","#00FF00","#00FF00"),e};class c{constructor(e){const[t,i,r,n]=e.symbol.split("-");this.id=e.symbol,this.symbol=t,this.rawDate=i,this.strike=parseFloat(r),this.type="P"===n?"PUT":"CALL",this.expirationDate=function(e){const[t,i,r,n]=e.match(/^(\d+)([A-Z]+)(\d+)$/);return new Date(parseInt("20"+n),function(e){switch(e){case"JAN":return 0;case"FEB":return 1;case"MAR":return 2;case"APR":return 3;case"MAY":return 4;case"JUN":return 5;case"JUL":return 6;case"AUG":return 7;case"SEP":return 8;case"OCT":return 9;case"NOV":return 10;case"DEC":return 11}throw new Error("Unexpected month: ["+e+"]")}(r),parseInt(i))}(i),this.DTE=Math.ceil((this.expirationDate-new Date)/864e5),this.bidPrice=parseFloat(e.bid1Price),this.bidSize=parseFloat(e.bid1Size),this.markPrice=parseFloat(e.markPrice),this.askPrice=parseFloat(e.ask1Price),this.askSize=parseFloat(e.ask1Size),this.underlyingPrice=parseFloat(e.indexPrice),this.annualizedMaxGain=365*this.maxGain/this.DTE,this.maxGainAsChange=this.strike/this.underlyingPrice-1,this.premiumAsPercent=this.premium/this.underlyingPrice}get isPut(){return"PUT"===this.type}get isCall(){return"CALL"===this.type}get maxGain(){return this.premium}get premium(){return this.bidPrice}get maxGainInKind(){return this.premiumAsPercent}get breakEvenAsChange(){return this.breakEven/this.underlyingPrice-1}priceToOpen(e){return h.fromMarket(e,this.bidPrice,this.markPrice,this.askPrice)}priceToClose(e,t){return h.fromExercise(-e,this.moneyness(t))}}class d extends c{constructor(e){super(e),this.breakEven=this.strike-this.premium,this.maxLoss=this.breakEven,this.maxGainRatio=this.maxGain/this.maxLoss,this.breakEvenVsHodler=this.underlyingPrice*(1+this.maxGainRatio),this.gainAtCurrentPrice=Math.min(this.underlyingPrice-this.breakEven,this.maxGain),this.gainAtCurrentPriceRatio=this.gainAtCurrentPrice/this.maxLoss,this.annualizedMaxGainInKind=365*this.maxGainInKind/this.DTE,this.annualizedMaxGainRatio=365*this.maxGainRatio/this.DTE}moneyness(e){return Math.max(0,this.strike-e)}}class u extends c{constructor(e){super(e),this.breakEven=this.strike+this.premium,this.gainAtCurrentPrice=Math.min(this.breakEven-this.underlyingPrice,this.maxGain),this.breakEvenVsShorter=this.underlyingPrice-this.premium}moneyness(e){return Math.max(0,e-this.strike)}}class h{constructor(e=0,t=e){this.fair=e,this.pessimistic=t,this.fairAsBet=e+1,this.pessimisticAsBet=t+1}copy(){return new h(this.fair,this.pessimistic)}add(e){return this.fair+=e.fair,this.pessimistic+=e.pessimistic,this}static fromMarket(e,t,i,r){return new h(-e*i,e>=0?-e*Math.max(i,r):-e*Math.min(t,i))}static fromExercise(e,t){return h.fromMarket(e,t,t,t)}}class m{constructor(){this.positions=new Map}addLeg(e,t=0){if(void 0===this.symbol)this.symbol=e.symbol,this.rawDate=e.rawDate,this.DTE=e.DTE,this.underlyingPrice=e.underlyingPrice;else if(this.symbol!==e.symbol||this.rawDate!==e.rawDate)throw new Error(`Cannot mix different symbols or expirations: ${this.symbol}-${this.rawDate} vs ${e.symbol}-${e.rawDate}`);return this.positions.set(e,(this.positions.get(e)||0)+t),this}maxSize(){let e=Number.MAX_VALUE;return this.positions.forEach(((t,i)=>{t<0?e=Math.min(e,i.bidSize):t>0&&(e=Math.min(e,i.askSize))})),e}priceToOpen(e=new h,t=(()=>{})){return this.positions.forEach(((i,r)=>{const n=r.priceToOpen(i);t(i,r,n),e.add(r.priceToOpen(i))})),e}priceToClose(e,t=new h,i=(()=>{})){return this.positions.forEach(((r,n)=>{const s=n.priceToClose(r,e);i(r,n,s),t.add(s)})),t}}class p{constructor(e,t,i){this.strategy=e,this.bestStrike=t,this.worstStrike=i;const r=t>i;let n="<ol>";const s=(e,t,i)=>{n+="<ul><li>",n+=`<b>${e} of ${t.id}</b>: value will be <b>$${i.pessimistic}</b>.`,n+="</li></ul>"},a=this.strategy.priceToOpen(new h,((e,t,i)=>{0!==e&&(n+="<li>",n+=`You <b>${e>0?"BUY":"SELL"}</b> ${Math.abs(e)} of this option: <b>${t.id}</b>.`,n+=`You should ${e>0?"pay":"receive"} about $${Math.abs(i.fair).toFixed(1)}, `,n+=`or at ${e>0?"most":"least"} $<b>${Math.abs(i.pessimistic).toFixed(1)}</b> via a market order.`,n+="</li>")})),o=a.pessimistic<0;n+=`</ol><p><hr>Thus to open the trade, you will <b>${o?"pay":"receive"} `,n+=`$${Math.abs(a.pessimistic).toFixed(1)}, net.</b></p>`,n+=`<hr><p>Then, at expiration (on ${e.rawDate}), there are two outcomes:</p><ul>`,n+=`<li>The <b>best outcome</b> is that ${e.symbol} will be at <b>$${t}</b> (or `,n+=(t>i?"above":"below")+"). Then this will be the value of your positions:";const l=this.strategy.priceToClose(t,new h,s);n+=`<p>That is, a total value of <b>$${l.pessimistic.toFixed(1)}</b>. `,n+="Together with the opening trade, the final P&L would be: ";const c=a.copy().add(l);n+=`$<b>${c.fair.toFixed(1)}</b> or at worst (with market orders) <b>$${c.pessimistic.toFixed(1)}</b></p></li>`,n+=`<li>The <b>worst outcome</b> is that ${e.symbol} will be at <b>$${i}</b> (or `,n+=(i<t?"below":"above")+"). Then this will be the value of your positions:";const d=this.strategy.priceToClose(i,new h,s);n+=`<p>That is, a total value of <b>$${d.pessimistic.toFixed(1)}</b>. `,n+="Together with the opening trade, the final P&L would be: ";const u=a.copy().add(d);n+=`<b>$${u.fair.toFixed(1)}</b> or at worst (with market orders) <b>$${u.pessimistic.toFixed(1)}</b></p></li>`,n+="</li></ul>",this.earnedYield=new h(-c.fair/u.fair,-c.pessimistic/u.pessimistic),n=`<p>How to create this position: <b>${e.symbol}</b> (currently at <b>$${e.underlyingPrice}</b>) <b>${r?"OVER":"UNDER"} $${t} after ${e.DTE} days</b> (${e.rawDate}), which should yield (if you win) a profit of at least <b>${(100*this.earnedYield.pessimistic).toFixed(1)}%</b></p>`+n,n+=`<p><b>Hence</b>, given that the MaxGain is $${c.fair.toFixed(1)} (or at worst $${c.pessimistic.toFixed(1)}), `,n+=`and the MaxLoss is $${u.fair.toFixed(1)} (or at worst $${u.pessimistic.toFixed(1)}), `,n+=`the yield of this bet (if you win it) is ${(100*this.earnedYield.fair).toFixed(1)}% `,n+=`or at least <b>${(100*this.earnedYield.pessimistic).toFixed(1)}%</b>, with market orders.`,this.explanationHtml=n}static createOver(e,t){const[i,r]=p.lowStrikeFirst(e,t),n=Math.min(1,i.askSize,r.bidSize);return new p((new m).addLeg(r,-n).addLeg(i,n),r.strike,i.strike)}static createUnder(e,t){const[i,r]=p.lowStrikeFirst(e,t),n=Math.min(1,i.bidSize,r.askSize);return new p((new m).addLeg(i,-n).addLeg(r,n),i.strike,r.strike)}static lowStrikeFirst(e,t){if(e.type!==t.type||e.strike===t.strike)throw new Error(`Can only build a spread from options of the same symbol, same type, different strike: ${e.id}, ${t.id} `);return e.strike<t.strike?[e,t]:[t,e]}}function b(c){(async function(e="BTC"){try{const t=await async function(e){const t=JSON.parse(localStorage.getItem(e));if(t&&Date.now()<t.expirationTimestamp)return console.log("Using cache"),console.log(t.response),t.response;const i=await fetch("https://api.bybit.com/v5/market/tickers?category=option&baseCoin="+e),r=JSON.parse(await i.text());if(0!==r.retCode)throw new Error("ByBit returned error: "+r.retMsg);return localStorage.setItem(e,JSON.stringify({response:r,expirationTimestamp:Date.now()+6e5})),console.log("Using API; populating cache"),console.log(r),r}(e);if(0!==t.retCode)throw new Error("ByBit returned error: "+t.retMsg);const i=t.result.list.map((e=>function(e){const[,,,t]=e.symbol.split("-");if("P"===t)return new d(e);if("C"===t)return new u(e);throw new Error(`Unexpected option type ${t}, from struct: ${e.symbol}`)}(e)));i.length||alert("No option fetched from ByBit (you probably got rate limited...try again later)");const r=i.filter((e=>e.isPut)),n=i.filter((e=>e.isCall));return r.sort(f),n.sort(f),{puts:r,calls:n}}catch(e){return console.error(e.stack),alert(`Error fetching Bybit data: ${e}`),[e]}})(c).then((({puts:d,calls:u})=>{if(d){const e=t().formatValue(d[0].underlyingPrice);document.getElementById(`${c}_price`).textContent=`${e}`}!function(r,n,s){new e({frozenColumns:4}).defineColumn("EXPIRATION<br>DATE",(e=>e.expirationDate),"date").defineColumn("DTE",(e=>e.DTE),"number").defineColumn(`${r} PUT<br>STRIKE`,(e=>e.strike),"number",t()).defineColumn("PREMIUM ($)<br>(=MAX GAIN)",(e=>e.markPrice),"number",t()).defineColumn("BREAKEVEN ($)<br>(=MAX LOSS)",(e=>e.breakEven),"number",t()).defineColumn("BREAKEVEN (%)",(e=>e.breakEvenAsChange),"number",i(),o()).defineColumn("MAX GAIN (%)",(e=>e.maxGainRatio),"number",i(),a()).defineColumn("MAX GAIN<br>WHEN "+r+"<br>PERFORMS BETTER<br>THAN (%)",(e=>e.maxGainAsChange),"number",i(),o()).defineColumn("BREAKEVEN<br>VS HODLER",(e=>e.breakEvenVsHodler),"number",t()).defineColumn("APR (%)",(e=>e.annualizedMaxGainRatio),"number",i(),l()).format(n,s)}(c,d,`${c}_puts_table`),function(r,n,s){new e({frozenColumns:4}).defineColumn("SYMBOL",(()=>r+" CALLS"),"string").defineColumn("EXPIRATION DATE",(e=>e.expirationDate),"date").defineColumn("DAYS TILL EXPIRATION",(e=>e.DTE),"number").defineColumn(`${r} CALL<br>STRIKE`,(e=>e.strike),"number",t()).defineColumn("PREMIUM (=MAX GAIN) ($)",(e=>e.markPrice),"number",t()).defineColumn("PREMIUM (%)",(e=>e.premiumAsPercent),"number",i()).defineColumn("BREAKEVEN ($)",(e=>e.breakEven),"number",t()).defineColumn("BREAKEVEN (%)",(e=>e.breakEvenAsChange),"number",i(),l()).format(n,s)}(c,u,`${c}_calls_table`),function(e,r,s){const a={fontSize:18,bold:!0},o={title:`All ${e} Puts (Each line is an expiration date, N days from today)`,titleTextStyle:{fontSize:24,bold:!0},hAxis:{title:`$ Strike (the price you promise to buy ${e} at)`,format:"$#,###",direction:-1,titleTextStyle:a},vAxis:{title:"Max Gain %",format:"#,###%",titleTextStyle:a},legend:{position:"top"},curveType:"function",pointSize:5},l=new google.visualization.DataTable;l.addColumn({type:"number",pattern:"$#,###"});const c=new Map;r.forEach((e=>{c.has(e.DTE)||(c.set(e.DTE,c.size),l.addColumn({type:"number",label:`${e.DTE}`,pattern:"$#,###"}),l.addColumn({role:"tooltip"}))}));const d=new Map;r.filter((e=>e.strike>e.underlyingPrice)).forEach((e=>d.set(e.DTE,Math.min(e.strike,d.get(e.DTE)||e.strike)))),r.filter((e=>e.strike<=(d.get(e.DTE)||0))).forEach((e=>{const r=Array(1+2*c.size);r[0]=e.strike;const s=c.get(e.DTE);r[1+2*s+0]=e.maxGainRatio,r[1+2*s+1]=`Strike: ${t().formatValue(e.strike)}\nExpiration: ${n().formatValue(e.expirationDate)}\nBreakEven: ${t().formatValue(e.breakEven)}\nMax gain: ${i().formatValue(e.maxGainRatio)}`,l.addRows([r])})),new google.visualization.LineChart(document.getElementById(s)).draw(l,o)}(c,d,`${c}_puts_chart`),function(i,n,a,o){const l=n[0].underlyingPrice;function c(e){const t=new Map;return e.forEach((e=>{const i=e.DTE;t.set(i,t.get(i)||[]),t.get(i).push(e)})),t}const d=c(n),u=c(a);const{allDTEs:h,allStrikes:m}=function(e){const t=new Set,i=new Set;return e.forEach((e=>{t.add(e.DTE),i.add(e.strike)})),{allDTEs:t,allStrikes:i}}(n);const b=new Map;h.forEach((e=>{const t=d.get(e),i=u.get(e);function r(e=[]){return e.reduce(((e,t)=>(e[t.strike]=t,e)),{})}const n=r(t),s=r(i),a=t.map((e=>e.strike)).sort(g()),o=new Map,c=new Map,h=(e,t)=>{e.earnedYield?.pessimisticAsBet>1&&t.set(e.bestStrike,e)};(function(e){const t=e.map(((e,t,i)=>[i[t],i[t+1]]));return t.pop(),t})(a).forEach((([t,i])=>{const r=[n[t],n[i]].filter((e=>void 0!==e)),a=[s[t],s[i]].filter((e=>void 0!==e));let d=r;l<i&&2===a.length&&(d=a),2===d.length&&(console.log(`${l} ${e} ${t}-${i} : selected: ${d[0].type}`),h(p.createOver(...d),o),h(p.createUnder(...d),c))})),b.set(e,{strikeToOverBets:o,strikeToUnderBets:c})}));const f=new e({frozenColumns:1,title:`All ${i} "Over" and "Under" bets (spreads). Each bet corresponds to a pair of puts; one bought and one`}).defineColumn(`${i} price`,(e=>e),"number",t()),E=[...m].sort(g(!1)),w=[...h].sort(g(!1));w.forEach((e=>{f.defineColumn(`${e}⬆️`,(t=>b.get(e).strikeToOverBets.get(t)?.earnedYield?.pessimisticAsBet||void 0),"number",r(),s()),f.defineColumn(`⬇️${e}`,(t=>b.get(e).strikeToUnderBets.get(t)?.earnedYield?.pessimisticAsBet||void 0),"number",r(),s())}));const{table:F}=f.format(E,o);google.visualization.events.addListener(F,"select",(()=>{const e=F.getSelection();if(!e.length)return;const t=e[0].row,i=window.event.target.cellIndex,r=w[Math.trunc((i-1)/2)],n=i%2==0,s=E[t],a=b.get(r),l=(n?a.strikeToUnderBets:a.strikeToOverBets).get(s);document.getElementById(`${o}_explanation`).innerHTML=l.explanationHtml}))}(c,d,u,`${c}_spreads_table`)}),(e=>{console.error(e.stack),alert(`Error: ${e}`)}))}function f(e,t){return e.DTE!==t.DTE?t.DTE-e.DTE:e.strike!==t.strike?e.isPut?e.strike-t.strike:t.strike-e.strike:-1}function g(e=!0){return(t,i)=>e?t-i:i-t}google.charts.load("current",{packages:["corechart","table"]}),google.charts.setOnLoadCallback((()=>{b("BTC"),b("ETH")}))})();